{"meta":{"title":"Scarborough's Fair","subtitle":"Essays/Notes/ACGN Comments","description":"uestcer/cs","author":"Kytolly","url":"https://101.42.54.79","root":"/"},"pages":[{"title":"","date":"2023-07-05T14:00:47.943Z","updated":"2023-07-05T14:00:47.943Z","comments":true,"path":"baidu_verify_codeva-kuCyuqmjzw.html","permalink":"https://101.42.54.79/baidu_verify_codeva-kuCyuqmjzw.html","excerpt":"","text":"4488d8587f741b8a4b7d5ff543fe33fa"},{"title":"","date":"2023-07-05T14:14:41.716Z","updated":"2023-07-04T15:31:20.480Z","comments":true,"path":"baidu_verify_codeva-trsyCNWAaz.html","permalink":"https://101.42.54.79/baidu_verify_codeva-trsyCNWAaz.html","excerpt":"","text":"ec4763a6294e5519dd09ba06383addb3"},{"title":"about","date":"2023-11-05T23:37:05.000Z","updated":"2023-11-05T23:37:05.685Z","comments":true,"path":"about/index.html","permalink":"https://101.42.54.79/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2023-11-05T23:41:17.000Z","updated":"2023-11-05T23:41:17.511Z","comments":true,"path":"archives/index.html","permalink":"https://101.42.54.79/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-11-05T23:36:15.000Z","updated":"2023-11-05T23:36:15.532Z","comments":true,"path":"categories/index.html","permalink":"https://101.42.54.79/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2023-11-05T23:36:37.000Z","updated":"2023-11-05T23:36:37.623Z","comments":true,"path":"friends/index.html","permalink":"https://101.42.54.79/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-11-05T23:34:50.000Z","updated":"2023-11-05T23:34:50.601Z","comments":true,"path":"tags/index.html","permalink":"https://101.42.54.79/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-07-05T14:14:41.722Z","updated":"2023-07-05T04:03:26.748Z","comments":true,"path":"css/custom.css","permalink":"https://101.42.54.79/css/custom.css","excerpt":"","text":"/* @font-face { font-family: Candyhome; src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf); font-display: swap; font-weight: lighter; } */ @font-face { font-family: ZhuZiAYuanJWD; src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2); font-display: swap; font-weight: lighter; } div#menus { font-family: \"ZhuZiAYuanJWD\"; } h1#site-title { font-family: ZhuZiAYuanJWD; font-size: 3em !important; } a.article-title, a.blog-slider__title, a.categoryBar-list-link, h1.post-title { font-family: ZhuZiAYuanJWD; } .iconfont { font-family: \"iconfont\" !important; font-size: 3em; /* 可以定义图标大小 */ font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } /* 时间轴生肖icon */ svg.icon { /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */ width: 1em; height: 1em; /* width和height定义图标的默认宽度和高度*/ vertical-align: -0.15em; fill: currentColor; overflow: hidden; } .icon-zhongbiao::before { color: #f7c768; } /* bilibli番剧插件 */ #article-container .bangumi-tab.bangumi-active { background: var(--anzhiyu-theme); color: var(--anzhiyu-ahoverbg); border-radius: 10px; } a.bangumi-tab:hover { text-decoration: none !important; } .bangumi-button:hover { background: var(--anzhiyu-theme) !important; border-radius: 10px !important; color: var(--anzhiyu-ahoverbg) !important; } a.bangumi-button.bangumi-nextpage:hover { text-decoration: none !important; } .bangumi-button { padding: 5px 10px !important; } a.bangumi-tab { padding: 5px 10px !important; } svg.icon.faa-tada { font-size: 1.1em; } .bangumi-info-item { border-right: 1px solid #f2b94b; } .bangumi-info-item span { color: #f2b94b; } .bangumi-info-item em { color: #f2b94b; } /* 解决artitalk的图标问题 */ #uploadSource > svg { width: 1.19em; height: 1.5em; } /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */ #page-header:not(.not-top-img):before { background-color: transparent !important; } /* 首页文章卡片 */ #recent-posts > .recent-post-item { background: rgba(255, 255, 255, 0.9); } /* 首页侧栏卡片 */ #aside-content .card-widget { background: rgba(255, 255, 255, 0.9); } /* 文章页面正文背景 */ div#post { background: rgba(255, 255, 255, 0.9); } /* 分页页面 */ div#page { background: rgba(255, 255, 255, 0.9); } /* 归档页面 */ div#archive { background: rgba(255, 255, 255, 0.9); } /* 标签页面 */ div#tag { background: rgba(255, 255, 255, 0.9); } /* 分类页面 */ div#category { background: rgba(255, 255, 255, 0.9); } /*夜间模式伪类遮罩层透明*/ [data-theme=\"dark\"] #recent-posts > .recent-post-item { background: #121212; } [data-theme=\"dark\"] .card-widget { background: #121212 !important; } [data-theme=\"dark\"] div#post { background: #121212 !important; } [data-theme=\"dark\"] div#tag { background: #121212 !important; } [data-theme=\"dark\"] div#archive { background: #121212 !important; } [data-theme=\"dark\"] div#page { background: #121212 !important; } [data-theme=\"dark\"] div#category { background: #121212 !important; } [data-theme=\"dark\"] div#category { background: transparent !important; } /* 页脚透明 */ #footer { background: transparent !important; } /* 头图透明 */ #page-header { background: transparent !important; } #rightside > div > button { border-radius: 5px; } /* 滚动条 */ ::-webkit-scrollbar { width: 10px; height: 10px; } ::-webkit-scrollbar-thumb { background-color: #3b70fc; border-radius: 2em; } ::-webkit-scrollbar-corner { background-color: transparent; } ::-moz-selection { color: #fff; background-color: #3b70fc; } /* 音乐播放器 */ /* .aplayer .aplayer-lrc { display: none !important; } */ .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body { left: -66px !important; transition: all 0.3s; /* 默认情况下缩进左侧66px，只留一点箭头部分 */ } .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover { left: 0 !important; transition: all 0.3s; /* 鼠标悬停是左侧缩进归零，完全显示按钮 */ } .aplayer.aplayer-fixed { z-index: 999999 !important; } /* 评论框 */ .vwrap { box-shadow: 2px 2px 5px #bbb; background: rgba(255, 255, 255, 0.3); border-radius: 8px; padding: 30px; margin: 30px 0px 30px 0px; } /* 设置评论框 */ .vcard { box-shadow: 2px 2px 5px #bbb; background: rgba(255, 255, 255, 0.3); border-radius: 8px; padding: 30px; margin: 30px 0px 0px 0px; } /* md网站下划线 */ #article-container a:hover { text-decoration: none !important; } #article-container #hpp_talk p img { display: inline; } /* 404页面 */ #error-wrap { position: absolute; top: 40%; right: 0; left: 0; margin: 0 auto; padding: 0 1rem; max-width: 1000px; transform: translate(0, -50%); } #error-wrap .error-content { display: flex; flex-direction: row; justify-content: center; align-items: center; margin: 0 1rem; height: 18rem; border-radius: 8px; background: var(--card-bg); box-shadow: var(--card-box-shadow); transition: all 0.3s; } #error-wrap .error-content .error-img { box-flex: 1; flex: 1; height: 100%; border-top-left-radius: 8px; border-bottom-left-radius: 8px; background-color: #3b70fc; background-position: center; background-size: cover; } #error-wrap .error-content .error-info { box-flex: 1; flex: 1; padding: 0.5rem; text-align: center; font-size: 14px; font-family: Titillium Web, \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft JhengHei\", \"Microsoft YaHei\", sans-serif; } #error-wrap .error-content .error-info .error_title { margin-top: -4rem; font-size: 9em; } #error-wrap .error-content .error-info .error_subtitle { margin-top: -3.5rem; word-break: break-word; font-size: 1.6em; } #error-wrap .error-content .error-info a { display: inline-block; margin-top: 0.5rem; padding: 0.3rem 1.5rem; background: var(--btn-bg); color: var(--btn-color); } #body-wrap.error .aside-list { display: flex; flex-direction: row; flex-wrap: nowrap; bottom: 0px; position: absolute; padding: 1rem; width: 100%; overflow: scroll; } #body-wrap.error .aside-list .aside-list-group { display: flex; flex-direction: row; flex-wrap: nowrap; max-width: 1200px; margin: 0 auto; } #body-wrap.error .aside-list .aside-list-item { padding: 0.5rem; } #body-wrap.error .aside-list .aside-list-item img { width: 100%; object-fit: cover; border-radius: 12px; } #body-wrap.error .aside-list .aside-list-item .thumbnail { overflow: hidden; width: 230px; height: 143px; background: var(--anzhiyu-card-bg); display: flex; } #body-wrap.error .aside-list .aside-list-item .content .title { -webkit-line-clamp: 2; overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; line-height: 1.5; justify-content: center; align-items: flex-end; align-content: center; padding-top: 0.5rem; color: white; } #body-wrap.error .aside-list .aside-list-item .content time { display: none; } /* 代码框主题 */ #article-container figure.highlight { border-radius: 10px; }"}],"posts":[{"title":"计算机组成与结构  学习笔记","slug":"计算机组成与结构 学习笔记","date":"2023-10-29T00:09:05.000Z","updated":"2023-10-29T00:13:46.723Z","comments":true,"path":"posts/ef98d727.html","link":"","permalink":"https://101.42.54.79/posts/ef98d727.html","excerpt":"","text":"计算机组成原理第一章：计算机系统概述冯诺依曼结构 存储器(MU) :存储指令和数据； 输入单元（IU）：接收输入信号； 输出单元（OU）：发送输出信号； 算数逻辑单元（ALU）：执行算数逻辑操作； 控制单元（CU）：产生各部件的控制信号； CPU 封装了CU，ALU与寄存器； 通过控制总线、地址总线和数据总线进行互联； 寄存器位于CPU内部，保持和CU、ALU同频，因而速度快于外部存储器； 存储器 随机访问寄存器（RAM）：易失性寄存器，访问速度较快但断电内容消失； 只读寄存器（ROM）：非易失性寄存器，常用于初始化启动指令； 采用“Cache-主存-磁盘”的三级存储结构； I/O接口与总线与外界进行信息交互； 计算机性能初步 CPU时间不包括程序输入输出时间或者运行其他程序的时间，表示程序在CPU上执行的时间（小于程序的响应时间）； 缩短程序的响应时间能增加吞吐率，反之不一定（可以增加处理器的个数）； CPU使用晶振产生的时钟信号来驱动或者定时； CPU时间=程序时钟周期时间$\\times$周期数 周期数=对应指令集花费的周期数 $CPU(Pro)=\\sum_{A\\in Pro}{CPI(A)\\times num(A)}$ 性能比表示两个计算机的性能差异； ​ $\\frac{性能_Ａ}{性能_B}= \\frac{CPU(B)}{CPU(A)}$ SPEC：实用基准测试程序集 基于现有应用程序的一套标准化源代码作为基准的测试程序集;方便对计算机性能的比较； 设置一个参考计算机，对于每一个参考程序，对所有的计算机均可计算出性能比，对于各个程序的性能比取几何平均值$\\sqrt[n]{\\prod_{i=1}^{n}SPECratio_i}$即可算出总体性能比； 性能的改进 提高并行的层次 系统级：使用多处理器 指令级：流水线 操作级：并行加法器，组相连cache，流水级功能部件 局部性原理（经验性质的原理） 时间局部性：最近访问过的项目可能近期内再次被使用 空间局部性：最近访问过的数据地址附近可能会再次使用 注重经常性事件：Amdahl定律$ Speedup(A)=\\frac {改进A前时间}{改进Ａ后时间}$$ F(A)=A在程序运行的时间在程序Pro中所占比例$$ Speedup(Pro)=\\frac{1}{1-F(A)+\\frac{F(A)}{Speedup(A)}}$$ Speedup(Pro)&lt;\\frac{1}{1-F(A)}$，这说明性能提高的瓶颈在于改进比例；$ Speedup(Pro)$越大，改进越优秀； 第二章：计算机的数值与编码补码 对于一个r位数d，对应补码为$f(d)=\\begin{cases} &amp;\\text d ,d&gt;0;\\ &amp;\\text (2^r-1)-|d|+1 ,d&gt;0;\\end{cases} $； 对于正数而言，补码等于本身，对于负数而言，补码等于其绝对值的反码加1； 已知补码，若最高位为0，表示正数，原码等于补码；若最高位为1，原码为补码减1后取反得到的正数的相反数； 补码表示的范围是$[100..0,011..1]$,也即$[-2^{n-1},2^{n-1}-1]$; 转化为更高位的数：符号拓展&amp;零拓展 符号拓展：在最高位前面增加相应的符号位（正0负1），适用于有符号数； 零拓展：在最高位前面增加0，适用于无符号数； 溢出：符号位相反两数相加不会溢出；溢出位交给异常处理； 乘除法基于加减法和移位运算实现； 移位 左移：右端补0； 右移： 逻辑右移：左端补0； 算数右移：左端补符号位； 逻辑与、或、非、异或：实现某些位的变化； 浮点数的规格化 二进制浮点数算数标准 IEEE-754 约定了小数点的位置 浮点数$(-1)^s\\times (1.M_2)\\times 2^E$ 分别为 符号位（1位） 阶码（8位/32位 或者 11位/64位） 尾数（23位/32位 或者 52位/64位） ,也即$[s][E+2^{n-1}-1][M_2]$; 小数点左边的数不必储存，约定始终为1 尾数按小数部分的真值进行存储 指数真实值需要加上固定偏移量$2^{n-1}-1$进行存储，$n$为阶码字段位数（即一般为127或1023） 阶码不能全0不能全1（属于保留数字，无穷或者无效数字） 浮点数的加减 对阶操作小数点位置对齐（阶码相等），小阶向大阶看看齐，隐藏位右移 尾数运算增加隐藏位，进行加减运算 规格化处理重新转化为一个规格化浮点数 实例：对于13位二进制数（1位符号位，5位阶码，7位尾数）$x=1.0110011\\times2^9,y=1.1101101\\times2^7$,计算$x+y$; 过程：阶码的固定偏移量为$2^4-1=15$;因而$x$的阶码表示为24（11000），$y$的阶码表示为22（10110）； $x$的编码为$[0][11000][0110011]$,$y$的编码为$[0][10110][1101101]$; 将$y$阶码向$x$对齐，隐藏位右移得$[0][11000][0111011]$; 尾数相加$01.0110011+00.0111011=01.1101110$,得$x+y=[0][11000][1101110]=1.1101110\\times2^9$;这已经是一个规格数了； 浮点数的乘除 阶码定点加减 尾数乘除 规格化处理 字符的表示 二进制编码 美国信息交换标准码（ASCII）： 表示现代英文和符号，但是过于有限 统一码（Unicode） ：每个符号要用两个或多个字节表示，但存在浪费，十六进制表示 UTF-8 ：变长的编码方式，用1-4个字节表示符号，二进制表示 第三章：计算机芯片的数字电路基础 输入输出逻辑关系：与/或/非 多输入端和一个输出端 利于封装组合和模块化不关心内部电路实现 输入变化存在延迟时间（基于晶体管等电气特性） 逻辑代数基础Axioms If $x\\neq 0$, $x=1$ ;if $x\\neq1$, $x=1$ If $x=0$ , $\\overline{x}=1$ ;if $x=1$ ,$\\overline{x}=0$ $0 \\cdot 0=0,0 \\cdot 1=0, 1\\cdot 0=0,1\\cdot 1=1 $ $0+0=0,1+0=1,0+1=1$,$1+1=1$ Notices $1+A=1$ $A+A=A$ $A+BC=(A+B)\\cdot (A+C)$ $\\overline{A+B}=\\overline{A}\\cdot \\overline{B}$ $A+\\overline{A}B=A+B$ $A+AB=A$ $AB+\\overline{A}C+BCDEF=AB+\\overline{A}C$ 反演定理与运算和或运算置换，取反运算不变，变量取反，计算顺序不变，得到反演逻辑式；两相等逻辑式的反演逻辑式相等； 对偶定理与、或运算置换，0、1置换，得到对偶式；两相等逻辑表达式的对偶式相等； 最大项之积和最小项之和最小项编码依据是真值为1； 最大项编码依据是真值为0； 标准形式:$F=\\sum{}{m(i_1,i_2,…,i_k)}=\\prod{}{M(j_1,j_2,…,j_t)}$ 反复利用$B=(A+\\overline {A})B$， $A+BC=(A+B)(A+C)$即可； 在$Carnot$ 图中，每个格子进行$0～2^n-1$的编码，相邻两个格子编码$Haming$距离为1(换言之，构成一个Gray码)，用尽量少的框去框尽可能多的1，方便得到更简单的逻辑电路图 利用标准形式可以判断两个逻辑函数是否相等，即逻辑函数相等那么他们的标准形式等价 逻辑序列CMOS逻辑 3.5～5V：高态 1.5～3.5V：未定义逻辑电平 0～1.5V：低态 NMOS和PMOS晶体管共用形成CMOS逻辑 对于NMOS，$V{gs}=0V$断开，$V{gs}=5V$导通； 对于PMOS，$V{gs}=0V$断开，$V{gs}=-5V$导通； 非门仅用了一个NMOS管和一个PMOS管； 与非门、与门用了k个NMOS管和k个PMOS管（k为输入端口数目，最多输入端为6个），下图是k=2的CMOS电路： 通过级联一个非门可以得到与门，尽量能使用与非运算表示的逻辑不用与运算的道理就在此处； 或非门将与非门中NMOS与PMOS互换可以得到或非门，类似的实例不再展示（最多输入端为4个）： 同样级联一个非门可以得到或门； 静态电气特性$V_{OHmin}$：输出为高态时的最小输出电压，一般为VCC-0.1V； $V_{OLmax}$：输出为低态时的最大输出电压，一般为地+0.1V； $V_{IHmin}$：保证能被识别为高态的最小输入电压，一般为VCC的70%； $V_{ILmax}$：保证能被识别为低态的最大输入电压，一般为VCC的30%; 进行级联时应该满足相应大小关系； 不用的输入端不允许悬空不接； 动态电器特性 转换时间 上升时间$t_r$和下降时间$t_f$图示,近似等于器件电阻和负载电容的乘积； 启示：尽可能使的信号驱动的输入端最少以减少负载电容； 传播延迟 输入信号变化到输出信号变化所需时间； $tp=t{pLH}+t_{pHL}$； 启示：尽可能使电路简单化以降低传播延迟； 动态功耗 电路处于非稳态时，MOS部分导通产生的漏电流带来功耗，是总功耗的主要部分； $PD=(C{PD}+CL)V{CC}\\times f$ ; Verilog第四章：计算机芯片的基本电路组成组合逻辑电路注意与非门、或非门比较简单，注意转化为与非和或非的组合； Multiplex多路选择器最简单的多路选择器（Multiplexer）是1位二选一多路器。 当输入S为高电平时，输入Y的值为输入A1的值； 当输入S为低电平时，输入Y的值为输入A0的值; Y=\\overline{S}A_0+SA_1=\\overline{\\overline{\\overline{S}A_0}\\cdot \\overline{SA_1}}1234567891011module MUX2X1( input A0, input A1, input S, output Y); not i0(S_n,S); nand i1(A0S,A_0,S); nand i2(A1S,A_1,S_n); nand i3(Y,A0S,A1S);endmodule 对于32位二选一选择器功能描述风格代码实现： 123456789101112131415161718192021222324module MUX2X32(A_0,A_1,S,Y); input[31:0] A_0,A_1; input[0:0] S; output[31:0] Y; function[31:0] select; input[31:0] A,B; input[0:0] S; case(S) 1&#x27;b1:select=A; 1&#x27;b0:select=B; endcase endfunction assign Y=select(A_1,A_0,S);endmodulemodule MUX2X32(A_0,A_1,S,Y); input[31:0] A_0,A_1; input[0:0] S; output[31:0] Y; assign Y=S==1&#x27;b0?A_0:A_1;endmodule 也可以用门级电路实现 1234567891011121314151617181920212223242526module MUX2X32( input[31:0]A_0, input[31:0]A_1, input[0:0]S, output[31:0]Y); MUX2X1 i0( .A_0(A_0[0]), .A_1(A_1[0]), .S(S), .Y(Y[0]) ); MUX2X1 i1( .A_0(A_0[1]), .A_1(A_1[1]), .S(S), .Y(Y[1]) ); ...//篇幅略长，但好像没找到别的办法了？ MUX2X1 i31( .A_0(A_0[31]), .A_1(A_1[31]), .S(S), .Y(Y[31]) ); endmodule 对于32位四选一选择器实现： 123456789101112131415161718module MUX2X32(A_0,A_1,A_2,A_3,S,Y); input[31:0] A_0,A_1,A_2,A_3; input[1:0] S; output[31:0] Y; function[31:0] select; input[31:0] A,B,C,D; input[0:0] S; case(S) 2&#x27;b00:select=A; 2&#x27;b01:select=B; 2&#x27;b10:select=C; 2&#x27;b11:select=D; endcase endfunction assign Y=select(A_0,A_1,A_2,A_3,S);endmodule Decode译码器$n-2^n$二进制译码器，其n个输入端信号形成一个n位的二进制数值，其$2^n$个输出端中对应序号的输出端为高电平输出，其余$2^n-1$个输出端输出低电平信号; 带使能端En的译码器真值表如下 $En$ $I_1$ $I_0$ $Y_0$ $Y_1$ $Y_2$ $Y_3$ 0 x x 0 0 0 0 1 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 1 DEC2T4E门级电路实现如下： 12345678910111213module DEC2T4E(I0,I1,En,Y0,Y1,Y2,Y3); input I0,I1,En; output Y0,Y1,Y2,Y3; not i0(I0_n,I0); not i1(I1_n,I1); not i2(En_n,En); nor i3(YY0,I0,I1,En_n); nor i4(YY1,I0,I1_n,En_n); nor i5(YY2,I0_n,I1,En_n); nor i6(YY3,I0_n,I1_n,En_n);endmodule DEC5T32E实现如下; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module DEC5T32E(I,En,Y); input[4:0] I; input En; output[31:0] Y; function[31:0] dec; input[4:0] I; input En; if(En) begin case(I) 5&#x27;b0_0000 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_0001 ; 5&#x27;b0_0001 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_0010 ; 5&#x27;b0_0010 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_0100 ; 5&#x27;b0_0011 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_1000 ; 5&#x27;b0_0100 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0001_0000 ; 5&#x27;b0_0101 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0010_0000 ; 5&#x27;b0_0110 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0100_0000 ; 5&#x27;b0_0111 : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_1000_0000 ; 5&#x27;b0_1000 : dec = 32&#x27;b0000_0000_0000_0000_0000_0001_0000_0000 ; 5&#x27;b0_1001 : dec = 32&#x27;b0000_0000_0000_0000_0000_0010_0000_0000 ; 5&#x27;b0_1010 : dec = 32&#x27;b0000_0000_0000_0000_0000_0100_0000_0000 ; 5&#x27;b0_1011 : dec = 32&#x27;b0000_0000_0000_0000_0000_1000_0000_0000 ; 5&#x27;b0_1100 : dec = 32&#x27;b0000_0000_0000_0000_0001_0000_0000_0000 ; 5&#x27;b0_1101 : dec = 32&#x27;b0000_0000_0000_0000_0010_0000_0000_0000 ; 5&#x27;b0_1110 : dec = 32&#x27;b0000_0000_0000_0000_0100_0000_0000_0000 ; 5&#x27;b0_1111 : dec = 32&#x27;b0000_0000_0000_0000_1000_0000_0000_0000 ; 5&#x27;b1_0000 : dec = 32&#x27;b0000_0000_0000_0001_0000_0000_0000_0000 ; 5&#x27;b1_0001 : dec = 32&#x27;b0000_0000_0000_0010_0000_0000_0000_0000 ; 5&#x27;b1_0010 : dec = 32&#x27;b0000_0000_0000_0100_0000_0000_0000_0000 ; 5&#x27;b1_0011 : dec = 32&#x27;b0000_0000_0000_1000_0000_0000_0000_0000 ; 5&#x27;b1_0100 : dec = 32&#x27;b0000_0000_0001_0000_0000_0000_0000_0000 ; 5&#x27;b1_0101 : dec = 32&#x27;b0000_0000_0010_0000_0000_0000_0000_0000 ; 5&#x27;b1_0110 : dec = 32&#x27;b0000_0000_0100_0000_0000_0000_0000_0000 ; 5&#x27;b1_0111 : dec = 32&#x27;b0000_0000_1000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1000 : dec = 32&#x27;b0000_0001_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1001 : dec = 32&#x27;b0000_0010_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1010 : dec = 32&#x27;b0000_0100_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1011 : dec = 32&#x27;b0000_1000_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1100 : dec = 32&#x27;b0001_0000_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1101 : dec = 32&#x27;b0010_0000_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1110 : dec = 32&#x27;b0100_0000_0000_0000_0000_0000_0000_0000 ; 5&#x27;b1_1111 : dec = 32&#x27;b1000_0000_0000_0000_0000_0000_0000_0000 ; default : dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_0000 ; endcase end else dec = 32&#x27;b0000_0000_0000_0000_0000_0000_0000_0000 ; endfunction assign Y=dec(I,En);endmodule Encode编码器将输入信号的每一个高、低电平信号编制成其对应的二进制编码; 如果出现多个输入高电平时，编码器产生最高优先级的输入端对应的编号。我们把这样的编码器叫做优先级编码器； 优先级编码器还需要一个额外的输出端IDLE来标识当前的输入信号是否为全0; $ I_7$ $I_6$ $I_5$ $I_4$ $I_3$ $ I_2$ $ I_1 $ $ I_0 $ $ Y_2 $ $ Y_1 $ $ Y_0 $ $Idle$ 1 x x x x x x x 1 1 1 0 0 1 x x x x x x 1 1 0 0 0 0 1 x x x x x 1 0 1 0 0 0 0 1 x x x x 1 0 0 0 0 0 0 0 1 x x x 0 1 1 0 0 0 0 0 0 1 x x 0 1 0 0 0 0 0 0 0 0 1 x 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 ENC8T3I实现如下（尚未验证）： 12345678910111213141516module ENC8T3I( input [7:0] I, output [2:0] Y, output [0:0] Idle); if(I[7]) begin Y=3&#x27;b111; Idel=1&#x27;b0; end else if(I[6]) begin assign Y=3&#x27;b110; assign Idel=1&#x27;b0; end else if(I[5]) begin assign Y=3&#x27;b101; assign Idel=1&#x27;b0; end else if(I[4]) begin assign Y=3&#x27;b100; assign Idel=1&#x27;b0; end else if(I[3]) begin assign Y=3&#x27;b011; assign Idel=1&#x27;b0; end else if(I[2]) begin assign Y=3&#x27;b010; assign Idel=1&#x27;b0; end else if(I[1]) begin assign Y=3&#x27;b001; assign Idel=1&#x27;b0; end else if(I[0]) begin assign Y=3&#x27;b000; assign Idel=1&#x27;b0; end else begin assign Y=3&#x27;b000; assign Idel=1&#x27;b0; end endmodule Adder 加法器如果能通过逻辑电路直接得出全加器每一位的进位信号就无需从最低位向最高位逐级传递进位信号了，这样的加法器叫做超前进位（Carry Lookahead）加法器； （图源） 四位超前进位加法器门级电路实现如下： 1234567891011121314151617181920212223242526272829303132333435363738module CLA_4( input[3:0] X, input[3:0] Y, input[0:0] Cin, output[3:0] S, output[0:0] Cout); wire[3:0] P=X|Y; wire[3:0] G=X&amp;Y; wire[3:0] Gn=~G; and i1(P0Gn0,P[0],Gn[0]); xor(S[0],P0Gn0,Cin); nand(P0Cin0,P[0],Cin); nand(Cout0,Gn[0],P0Cin0); and(P1Gn1,P[1],Gn[1]); xor(S[1],P1Gn1,Cout0); nand(P1P0Cin0,P[1],P[0],Cin); nand(P1G0,P[1],G[0]); nand(Cout1,Gn[1],P1G0,P1P0Cin0); and(P2Gn2,P[2],Gn[2]); xor(S[2],P2Gn2,Cout1); nand(P2P1P0Cin0,P[2],P[1],P[0],Cin); nand(P2P1G0,P[2],P[1],G[0]); nand(P2G1,P[2],G[1]); nand(Cout2,Gn[2],P2G1,P2P1G0,P2P1P0Cin0); and(P3Gn3,P[3],Gn[3]); xor(S[3],P3Gn3,Cout2); nand(P3P2P1P0Cin0,P[3],P[2],P[1],P[0],Cin); nand(P3P2P1G0,P[3],P[2],P[1],G[0]); nand(P3P2G1,P[3],P[2],G[1]); nand(P3G2,P[3],G[2]); nand(Cout,Gn[3],P3G2,P3P2G1,P3P2P1G0,P3P2P1P0Cin0);endmodule 16位组间串行进位加法器实现如下： 123456789101112module CLA_16 (X, Y, Cin, S, Cout); input [15:0] X, Y; input Cin; output [15:0] S; output Cout; wire Cout0, Cout1, Cout2; CLA_4 add0 (X[3:0], Y[3:0], CIN, S[3:0], Cout0); CLA_4 add1 (X[7:4], Y[7:4], Cout0, S[7:4], Cout1); CLA_4 add2 (X[11:8], Y[11:8], Cout1, S[11:8], Cout2); CLA_4 add3 (X[15:12], Y[15:12], Cout2, S[15:12], Cout);endmodule 32位组间串行进位加法器实现如下： 1234567891011121314151617module CLA_32 (X, Y, Cin, S, Cout); input [31:0] X, Y; input Cin; output [31:0] S; output Cout; wire Cout0, Cout1, Cout2,Cout3, Cout4, Cout5,Cout6, Cout; CLA_4 add0 (X[3:0], Y[3:0], CIN, S[3:0], Cout0); CLA_4 add1 (X[7:4], Y[7:4], Cout0, S[7:4], Cout1); CLA_4 add2 (X[11:8], Y[11:8], Cout1, S[11:8], Cout2); CLA_4 add3 (X[15:12], Y[15:12], Cout2, S[15:12], Cout3); CLA_4 add4 (X[19:16], Y[19:16], Cout3, S[19:16], Cout4); CLA_4 add5 (X[23:20], Y[23:20], Cout4, S[23:20], Cout5); CLA_4 add6 (X[27:24], Y[27:24], Cout5, S[27:24], Cout6); CLA_4 add7 (X[31:28], Y[31:28], Cout6, S[31:28], Cout); endmodule Adder-Subtracter加减器利用加法器可实现减法运算； 可在串行进位加法器的基础上对其中一个输入向量的每个位信号增加了一个异或门，实现： 当输入信号Sub为低电平时，完成加法运算，当输入信号Sub为高电平时，完成减法运算； 16位组间串行进位加减器实现如下： 12345678module ADDSUB_16 (X, Y, Sub, S, Cout); input [15:0] X, Y; input Sub; output [15:0] S; output Cout; CLA_16 adder0 (X, Y^&#123;16&#123;Sub&#125;&#125;, Sub, S, Cout);endmodule 32位组间串行进位加减器实现如下： 1234567module ADDSUB_32 (X, Y, Sub, S, Cout); input [31:0] X, Y; input Sub; output [31:0] S; output Cout; CLA_32 adder0 (X, Y^&#123;32&#123;Sub&#125;&#125;, Sub, S, Cout);endmodule Shifter 移位器 X是32位移位前的输入信号；Sh是32位移位后的输出信号； 输入Sa表示移位位数，5位宽（移位位数为0~31位）； 输入Arith为高电平表示进行算术移位，为低电平表示进行逻辑移位； 输入Right为高电平表示向右移位，为低电平表示向左移位； 根据输入移位二进制表示，将移位器分成5级，分别进行移位16，8，4，2，1位； （未测试）32位移位器的粗略实现 123456789101112131415161718module SHIFTER_32 (X, Sa, Arith, Right, Sh); input [31:0] X; input [4:0] Sa; input Arith, Right; output [31:0] Sh; wire [31:0] T4, S4, T3, S3, T2, S2, T1, S1, T0; wire a = X[31] &amp; Arith; wire [15:0] e = &#123;16&#123;a&#125;&#125;; parameter z = 16&#x27;b0; wire [31:0] L1u, L1d, L2u, L2d, L3u, L3d, L4u, L4d, L5u, L5d; assign L1u = &#123;X[15:0] ,z&#125;; assign L1d = &#123;e, X[31:16] &#125;; MUX2X32 M1l (L1u, L1d, Right, T4); MUX2X32 M1r (X, T4, Sa[4], S4); //完成第1级多路器实现 …endmodule Comparator 比较器按位异或结果每一位都是0说明相同，输出高电平；否则不同，输出低电平； （未测试）CPT4的基本实现 12345678910module CPT4 (A, B, Y);input [3:0] A, B;output Y;xor i0 (D0, A[0], B[0]);xor i1 (D1, A[1], B[1]);xor i2 (D2, A[2], B[2]);xor i3 (D3, A[3], B[3]);nor i4 (Y, D0, D1, D2, D3);endmodule Extender 数据拓展器有两种方式：符号拓展，零拓展； 数据扩展模块需要一个数据输入端、一个扩展方式选择端和一个数据输出端； （未测试）16位数拓展32位数具体实现; 123456789101112module EXT16T32 (X, Se, Y);input [15:0] X;input B;output Y;wire [31:0] E0, E1;wire [15:0] e = &#123;16&#123;X[15]&#125;&#125;;parameter z = 16ˊb0;assign E0 = &#123;z, X&#125;;assign E1 = &#123;e, X&#125;;MUX2X32 i(E0, E1, Se, Y);endmodule 时序逻辑电路D锁存器 D En Q Qn 1 1 1 0 0 1 0 1 X 0 维持不变 维持不变 D锁存器不会出现其输出Q和Qn同时为高电平的情况，从而也就避免了当D锁存器关闭时其输出进入不可预知状态 具体实现（未测试） 123456789101112module D_Latch (D, En, Q, Qn);input D, En;output Q, Qn;wire Sn, Rn, Dn;not i0 (Dn, D);nand i1 (Sn, D, En);nand i2 (Rn, En, Dn);nand i3 (Q, Sn, Qn);nand i4 (Qn, Q, Rn); //这两行代码实现的是Sn-Rn锁存器endmodule D触发器在计算机芯片内部，我们往往需要通过输入的时钟边沿信号（时钟的上升沿或下降沿）去控制D锁存器的开闭，把这种用时钟边沿控制D锁存器中存储内容的元件叫做D触发器； 用两个D锁存器和两个非门构成了一个上升沿触发式D触发器； D Clk Q Qn 1 上升沿 1 0 0 上升沿 0 1 X 0 维持不变 维持不变 X 1 维持不变 维持不变 具体实现（未测试） 1234567891011module D_FF (D, Clk, Q, Qn);input D, Clk;output Q, Qn;wire Clkn, Q0, Qn0;not i0 (Clkn, Clk);D_Latch d0 (D, Clkn, Q0, Qn0); //主锁存器D_Latch d1 (Q0, Clk, Q, Qn); //从锁存器endmodule 带使能端和清零端的上升沿式D触发器 D Clk En Clrn Q Qn 1 上升沿 1 1 1 0 0 上升沿 1 1 0 1 X X 0 1 维持不变 维持不变 X 上升沿 X 0 0 1 32位通用寄存器 12345678910module D_FFEC32 (D, Clk, En, Clrn, Q, Qn);input [31:0 ] D;input Clk, En, Clrn;output [31:0] Q, Qn;D_FFEC d0 (D[0], Clk, En, Clrn, Q[0], Qn);D_FFEC d1 (D[1], Clk, En, Clrn, Q[1], Qn);…D_FFEC d31 (D[31], Clk, En, Clrn, Q[31], Qn);endmodule","categories":[],"tags":[{"name":"原理","slug":"原理","permalink":"https://101.42.54.79/tags/%E5%8E%9F%E7%90%86/"},{"name":"verilog","slug":"verilog","permalink":"https://101.42.54.79/tags/verilog/"}]},{"title":"图论:Tarjan缩点相关，SCC问题","slug":"图论：Tarjan缩点","date":"2023-08-02T18:53:22.000Z","updated":"2023-08-06T12:15:54.585Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"https://101.42.54.79/posts/undefined.html","excerpt":"","text":"Preface学校的Tarjan模板题都还没过，不知道卡了哪个点； ContentProblem对于一个有向无环图(DAG),找到其拓扑排序，或者判断有向图是否是DAG； 在 DAG 上，使用DP 求最长（短）路； 对于有向图，利用Tarjan算法进行缩点，重构DAG; 孤立的一个点也是一个强连通分量； 对于无向图，利用Tarjan算法进行缩点，指出割点，割边，点双连通分量，边双连通分量； 单独的一条边带两个端点我们也认为是点双连通分量； Solution拓扑排序对于一个有向图G，G是有向无环图的充分必要条件为能进行拓扑排序，拓扑排序的思路是： 建图，计算所有点的入度； 所有入度为0的点入队； 队首出队同时记录队首的拓扑序，队首的所有儿子入读自减，如果有儿子为0则儿子入队，直至队列为空； 记录一个小性质：对于一个DAG，至少添加几条边才能使它变为强连通图？ 我们计算入度为零的点数为a，出度为零的点数为b，那么我们至少需要添加的边数为max(a,b)，如果只有一个点的话，我们不需要添加任何边； B3644 【模板】拓扑排序 / 家谱树 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#define local//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=1e5;class Edge&#123; public: int to; int head; int nxt; int cnt;&#125;e[maxn];vector&lt;int&gt; head;int indeg[maxn];void add(int u,int v,int&amp;cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u; e[cnt].to=v; cnt++; indeg[v]++;&#125;queue&lt;int&gt; q;int dot[maxn];void topusort(int(&amp;indeg)[maxn],int (&amp;dot)[maxn],int n)&#123; for(int i=1;i&lt;=n;i++)&#123; if(indeg[i]==0) q.push(i); &#125; int id=0; while(!q.empty())&#123; int x=q.front(); q.pop(); dot[++id]=x; for(int j=head[x];j!=-1;j=e[j].nxt)&#123; int y=e[j].to; indeg[y]--; if(indeg[y]==0) q.push(y); &#125; &#125; return ;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n; cin&gt;&gt;n; head.resize(n+1,-1); int cnt=0; memset(indeg,0,sizeof(indeg)); memset(dot,0,sizeof(dot)); for(int i=1;i&lt;=n;i++)&#123; int x=0; while(cin&gt;&gt;x&amp;&amp;x!=0) add(i,x,cnt); &#125; topusort(indeg,dot,n); for(int i=1;i&lt;=n;i++) cout&lt;&lt;dot[i]&lt;&lt;&quot; &quot;; return 0;&#125; Tarjan缩点关于Tarjan算法的流程这篇博客图解挺清楚的，稍微总结一下流程： 深度优先搜索这个图，选取一个根节点（注意整个图可能会有多个连通分支，根节点要遍历所有未访问过的结点）； 遍历当前根节点的所有儿子，按照时间戳给当前根节点的dfn,low初始化（dfn表示在dfs过程中访问该该节点的序号，也即时间戳，这个值不会更新，low表示这个点能回访的节点中最小的时间戳，在更新结束后同属于一个强连通分量的点low值相同），同时根节点入栈，将儿子作为新的根节点继续搜索； 在搜索图过程中如果搜索到了已经访问过的节点，如果该点还在栈中，那么意味着回访，我们更新当前根节点的low，搜索开始回溯，同属于一个强连通分量的结点的low都开始更新为刚刚回访结点的low值；（注意在栈中这个条件是必须的，如果一个点不在的low值被不在栈中的点更新了，那么这个点将一直不满足出栈的条件而被留在栈中，典型的反例就是一个点P指向一个强连通分量的所有点，但强连通分量的点此时均已出栈,P点的low会被错误地更新，最终表现为强连通分量的缺少）； 在所有儿子遍历完成后，检查这个点的dfn,low是否相等，如果相等那么它作为回访的结点，让它带着同一个强联通分量的点出栈，算法保证了这些点是栈顶部的若干点； P3387 【模板】缩点 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=1e5+10;int w[maxn];vector&lt;int&gt; head;vector&lt;int&gt; DAGhead;class Edge&#123; public: int head; int to; int nxt;&#125;e[maxn],DAGe[maxn];void add(int u,int v,int&amp;cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u; e[cnt].to=v; return ;&#125;void DAGadd(int u,int v,int&amp;cnt)&#123; DAGe[cnt].nxt=DAGhead[u]; DAGhead[u]=cnt; DAGe[cnt].head=u; DAGe[cnt].to=v; return ;&#125;int dfn[maxn];int low[maxn];bool instk[maxn];stack&lt;int&gt; stk;vector&lt;int&gt; scc[maxn];int sccnum=0;int sccid[maxn];int color[maxn];int ww[maxn];int dep=0;void tarjan(int x)&#123; dfn[x]=++dep; low[x]=dep; stk.push(x); instk[x]=true; for(int i=head[x];i!=-1;i=e[i].nxt)&#123; int y=e[i].to; if(!dfn[y])&#123; tarjan(y); low[x]=min(low[x],low[y]); &#125; else if(instk[y]) low[x]=min(low[x],dfn[y]); &#125; if(dfn[x]==low[x])&#123; sccid[++sccnum]=x; while(!stk.empty()&amp;&amp;stk.top()!=x)&#123; int y=stk.top(); stk.pop(); instk[y]=false; color[y]=sccnum; scc[sccnum].push_back(y); &#125; stk.pop(); instk[x]=false; color[x]=sccnum; scc[sccnum].push_back(x); &#125;&#125;int f[maxn];void dp(int x)&#123; if(f[x]) return ; f[x]=ww[x]; int res=0; for(int i=DAGhead[x];i!=-1;i=DAGe[i].nxt)&#123; int y=DAGe[i].to; if(!f[y]) dp(y); if(res&lt;f[y]) res=f[y]; &#125; f[x]+=res; return ;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m; cin&gt;&gt;n&gt;&gt;m; head.resize(n+1,-1); for(int i=1;i&lt;=n;i++) cin&gt;&gt;w[i]; for(int i=0;i&lt;m;i++)&#123; int u,v; cin&gt;&gt;u&gt;&gt;v; add(u,v,i); &#125; memset(dfn,0,sizeof(dfn)); memset(low,0,sizeof(low)); memset(sccid,0,sizeof(sccid)); memset(instk,0,sizeof(instk)); memset(ww,0,sizeof(ww)); memset(f,0,sizeof(f)); for(int i=1;i&lt;=n;i++) if(!dfn[i]) tarjan(i); for(int i=1;i&lt;=sccnum;i++) &#123; for(int j=0;j&lt;scc[i].size();j++)&#123; ww[i]+=w[scc[i][j]]; &#125; &#125; DAGhead.resize(sccnum+1,-1); int cnt=0; for(int i=0;i&lt;m;i++)&#123; int u=e[i].head; int v=e[i].to; if(color[u]!=color[v]) &#123; DAGadd(color[u],color[v],cnt); cnt++; &#125; &#125; int ans=0; for(int i=1;i&lt;=sccnum;i++)&#123; if(!f[i])&#123; dp(i); if(ans&lt;f[i]) ans=f[i]; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 割点由于割点是相较于无向图的概念所以Tarjan算法不能直接应用于求出割点，但是我们利用Tarjan算法的思想魔改一下，根据dfn序将图中顶点分成若干性质相同的块（low相同的属于同一个集合）便可以找到割点； 注意这里的low数组的含义与传统的Tarjan有略微的不同，更新条件也不一样； 对于无向图DFS树的相关性质： 对于每个结点的子树之间没有边相连（否则搜索这棵子树的时候一定会顺着这条边把另一棵子树一并搜索，所以另一棵子树将没有机会成为子树，矛盾） 对于非树边的两个端点，其中一个一定是另一个的祖先（非树边不能连接不同子树上的结点，所以非树边的两个端点一定在同一个子树上，自然具有了祖先关系）； 祖先的时间戳一定小于其子孙的时间戳； 对于树边总可以指定一个方向使得父亲指向儿子，相对的，对于无向图中儿子指向父亲的边就是非树边； 对于一个无向连通图，取出其中一棵可能的DFS树，对于非根结点x，我们记T(x)为$%$x伸展出来的子树（包括x），那么倘若x是割点，那么将其删去变得不再连通，对于x的儿子y来说，y通过非树边回访的点u一定不是x的祖先，（注意在DFS无法搜索到未访问的点时，一定是通过非树边回访那些已经访问的点，有些点回访它的父亲，也有的点回访其他祖先，因为不可能在其他子树上），换言之，u在T(x)中，因此在所有y所能回访的节点中，我们维护这些结点最小的dfn，更新low(y)；在一个儿子递归结束后，我们用儿子们中的最小low值更新父亲结点的low，如果儿子能回访的结点甚至都不能是x的祖先(low[y]\\ge dfn[x])，那么x就是割点； 对于根节点则要简单许多，只需要一个特判：如果根节点发出两个及以上真-子树（不包括x）的话，说明把x删去就会导致不连通（因为子树之间没有边相连）； 对于一般的图，我们只需要考虑每个连通分量即可； 根据以上描述手搓的一个草图，防止以后看不懂； P3388 【模板】割点（割顶） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#define local#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=200005;class edge&#123; public: int head; int to; int nxt;&#125;e[maxn];vector&lt;int&gt;head;void add(int u,int v,int&amp;cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u; e[cnt].to=v; cnt++;&#125;int dep=0;int dfn[maxn];int low[maxn];bool cut[maxn];stack&lt;int&gt; stk;void Cut(int now,int fa,int rt)&#123; dfn[now]=low[now]=++dep; int sontree=0; for(int i=head[now];i;i=e[i].nxt)&#123; int sn=e[i].to; if(!dfn[sn])&#123; sontree++; Cut(sn,now,rt); low[now]=min(low[now],low[sn]); if(low[sn]&gt;=dfn[now]&amp;&amp;now!=rt) cut[now]=1; &#125; else low[now]=min(low[now],dfn[sn]); &#125; if(now==rt&amp;&amp;sontree&gt;=2) cut[now]=1; return;&#125;int main()&#123; #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m; cin&gt;&gt;n&gt;&gt;m; head.resize(n+1); int cnt=1; for(int i=1;i&lt;=m;i++)&#123; int u,v; cin&gt;&gt;u&gt;&gt;v; add(u,v,cnt); add(v,u,cnt); &#125; for(int i=1;i&lt;=n;i++) if(!dfn[i]) Cut(i,-1,i); vector&lt;int&gt; ans; for(int i=1;i&lt;=n;i++)&#123; if(cut[i])ans.push_back(i); &#125; cout&lt;&lt;ans.size()&lt;&lt;endl; for(int i=0;i&lt;ans.size();i++)&#123; cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;; &#125; return 0;&#125; 割边一个基本的事实是所有的割点都依附于割边，我们用相同的办法更新相应的dfn,low数组，但是判定条件略有区别：我们忽略对回边（树边的逆向边）的更新，如果对于边xy，y只能能回访到时间戳严格大于x的点，说明xy是割边，否则不是； T103481 【模板】割边 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#define local//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=6e5+10;class edge&#123; public: int head; int to; int nxt;&#125;e[maxn];vector&lt;int&gt; head;void add(int u,int v,int cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt].head=u;&#125;int rev(int x)&#123; return x%2?x+1:x-1;&#125;int dfn[maxn];int low[maxn];bool bdg[maxn];int dep=0;void bridge(int x,int eg)&#123; dfn[x]=low[x]=++dep; for(int i=head[x];i;i=e[i].nxt)&#123; int y=e[i].to; if(!dfn[y])&#123; bridge(y,i); low[x]=min(low[x],low[y]); if(low[y]&gt;dfn[x]) bdg[i]=bdg[rev(i)]=true; &#125; else if(eg!=rev(i)) low[x]=min(low[x],dfn[y]); &#125; return ;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m; cin&gt;&gt;n&gt;&gt;m; head.resize(n+1); for(int i=1;i&lt;=m;i++)&#123; int u,v; cin&gt;&gt;u&gt;&gt;v; add(u,v,2*i-1); add(v,u,2*i); &#125; for(int i=1;i&lt;=n;i++)if(!dfn[i]) bridge(i,0); int bdgnum=0; for(int i=1;i&lt;=2*m;i+=2) &#123; if(bdg[i]) bdgnum++; &#125; cout&lt;&lt;bdgnum&lt;&lt;endl; return 0;&#125; 点双连通分量称极大的不包含割点的连通块被称为点的双连通分量 点双连通分量是点双连通极大子图； BCC中无割点 若BCC间有公共点，那么公共点是原图的割点； 无向连通图中割点至少属于两个BCC，非割点属于一个BCC 点双连通不具有传递性； 由上述性质我们知道，割点是每个点双的公共点，在遍历DFS树时候发现点双意味着割点（或者DFS的树根）必然最先发现，因此在与有向图求解强连通分量时不同，如果回访到了割点（或者树根），应该立即让子树出栈，包括割点（或者树根），加入新的点双中； P8435 【模板】点双连通分量 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#define local//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=4e6+10;class edge&#123; public: int head; int to; int nxt;&#125;e[maxn];vector&lt;int&gt; head;void add(int u,int v,int cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u; e[cnt].to=v;&#125;int dfn[maxn];int low[maxn];int dep=0;stack&lt;int&gt; stk;vector&lt;int&gt; bcc[maxn];bool instk[maxn];int bccnum=0;void BCC(int x,int fa)&#123; dfn[x]=low[x]=++dep; stk.push(x); int son=0; for(int i=head[x];i;i=e[i].nxt)&#123; int y=e[i].to; if(!dfn[y])&#123; son++; BCC(y,x); low[x]=min(low[x],low[y]); if(low[y]&gt;=dfn[x])&#123; bccnum++; while(stk.top()!=y) &#123; bcc[bccnum].push_back(stk.top()); stk.pop(); &#125; bcc[bccnum].push_back(y); stk.pop(); bcc[bccnum].push_back(x); &#125; &#125; else if(y!=fa) low[x]=min(low[x],dfn[y]); &#125; if(fa==0&amp;&amp;son==0) bcc[++bccnum].push_back(x); return;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m; cin&gt;&gt;n&gt;&gt;m; head.resize(n+1); for(int i=1;i&lt;=m;i++)&#123; int u,v; cin&gt;&gt;u&gt;&gt;v; add(u,v,2*i-1); add(v,u,2*i); &#125; for(int i=1;i&lt;=n;i++) if(!dfn[i]) BCC(i,0); cout&lt;&lt;bccnum&lt;&lt;endl; for(int i=1;i&lt;=bccnum;i++)&#123; cout&lt;&lt;bcc[i].size()&lt;&lt;&quot; &quot;; for(int j=0;j&lt;bcc[i].size();j++)&#123; cout&lt;&lt;bcc[i][j]&lt;&lt;&quot; &quot;; &#125; cout&lt;&lt;endl; &#125; return 0;&#125; 边双连通分量极大的不含有桥的连通区域被称为边的双连通分量; 观察我们知道把所有的割边删除留下来的连通分支本身构成边连通分量，所以整体与有向图求强连通分量类似； 注意对重边的处理即可； P8436 【模板】边双连通分量 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#define local//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int maxn=4e6+5;class edge&#123; public: int head; int to; int nxt;&#125;e[maxn];vector&lt;int&gt; head;void add(int u,int v,int&amp;cnt)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u; e[cnt].to=v; cnt++;&#125;int dfn[maxn];int low[maxn];int dep=0;int instk[maxn];stack&lt;int&gt; stk;vector&lt;int&gt; edcc[maxn];int edccnum=0;int rev(int x)&#123; return x%2?x+1:x-1;&#125;void EDCC(int x,int fa,int eg)&#123; dfn[x]=low[x]=++dep; stk.push(x); instk[x]=1; int revis=0; for(int i=head[x];i;i=e[i].nxt)&#123; int y=e[i].to; if(!dfn[y])&#123; EDCC(y,x,i); low[x]=min(low[x],low[y]); &#125; else if(i!=rev(eg)&amp;&amp;instk[y]) low[x]=min(low[x],dfn[y]); &#125; if(low[x]==dfn[x])&#123; edccnum++; while(stk.top()!=x)&#123; edcc[edccnum].push_back(stk.top()); instk[stk.top()]=0; stk.pop(); &#125; edcc[edccnum].push_back(x); instk[x]=0; stk.pop(); &#125;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m; cin&gt;&gt;n&gt;&gt;m; int cnt=1; head.resize(n+1); for(int i=1;i&lt;=m;i++)&#123; int u,v; cin&gt;&gt;u&gt;&gt;v; add(u,v,cnt); add(v,u,cnt); &#125; for(int i=1;i&lt;=n;i++) if(!dfn[i]) EDCC(i,0,0); cout&lt;&lt;edccnum&lt;&lt;endl; for(int i=1;i&lt;=edccnum;i++)&#123; cout&lt;&lt;edcc[i].size()&lt;&lt;&quot; &quot;; for(int j=0;j&lt;edcc[i].size();j++)&#123; cout&lt;&lt;edcc[i][j]&lt;&lt;&quot; &quot;; &#125; cout&lt;&lt;endl; &#125; return 0;&#125; ExampleGym - 104197K Remark重新整理了一遍笔记还是没过学校的逆天模板题，留大坑于此；","categories":[],"tags":[]},{"title":"图论：最短路相关算法-Dijstra,SPFA and Floyd","slug":"图论：最短路相关算法：Dijstra,SPFA and Floyd","date":"2023-07-15T14:46:32.000Z","updated":"2023-10-29T00:10:00.044Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"https://101.42.54.79/posts/undefined.html","excerpt":"","text":"Preface暑假集训用到了最短路的板子但之前的板子没存下来，在加上之前也看的不是很明白，故这里放点笔记； 部分板子目前还未测试过，谨慎使用(2023.7.15)； ContentProblem用链式前向星方式存储一个有权图G(V:E)，找到点 i,j 之间权值最小的路径长度； 注意：有时题目中的图其实就是树，而树的路径长度用 dfs 就好了不需要用这个； 通常包括\\ Dijstra 算法,SPFA \\ and \\ Floyd算法，其中小心SPFA被卡爆（）； SolutionDijstra 算法Notice: 该算法只能处理边正权图的单源最短路问题，但是它的效率十分优秀，一般采用带小根堆优先队列优化（ZKW线段树!Fibonnaci堆!）； 时间复杂度为O((|V|+|E|)log|V|); 但这个复杂度放在稠密图里可能会被$%$hack,需要换成邻接矩阵的方式存图，复杂度为O(|V|^2),遇到了再补吧； Proof： 对于每个点v均维护一个「当前最短距离数组」dis[v] 以及「访问数组」vis[v],首先将dis[u]初始化为0，将其他点的距离初始化为无穷，并将所有点初始化为未访问的。记e[i]:u-v的边权为 e[i].w。然后进行以下步骤： 从所有未访问的点中，找出当前距离最小的,并将其标记为已访问的; 调整所有出边连接但尚未访问的点，转移状态； 重复1和2步骤，直到所有点都已访问，因为所有边权权值均为正的，所以用之后访问的结点是不能更新已经访问过的结点的（因为贪婪算法下若可以更新的话必定在还在之前就已经更新过了）； 可以用pre[y]=i维护最短的路径（点边关系）； Template：标准版询问单源最短路径 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#define local//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;using namespace std;const int N=200005;struct Edge&#123; int head; int to; int nxt; int w;&#125;e[N];void add(int u,int v,int w,int&amp; cnt,std::vector&lt;int&gt;&amp; head)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u,e[cnt].to=v,e[cnt].w=w; cnt++; return ;&#125;//链式前向星建图//*****************************************************************************************//long long dis[maxn]; //int pre[maxn];const int INF=1000000009;class Node&#123;//使用Node维护每次要更新的点和距离public: long long distance; int position; Node(long long a,int b)&#123;distance=a;position=b;&#125; bool operator &gt;(const Node&amp;obj) const&#123; return distance&gt;obj.distance; &#125;;&#125;;class cmp&#123;//小根堆比较函数public: bool operator()(Node&amp;a,Node&amp;b)const&#123; return a&gt;b; &#125;&#125;;std::priority_queue&lt;Node,std::vector&lt;Node&gt;,cmp&gt; disQ;void Dijstra(int u,int n,long long (&amp;dis)[maxn],std::vector&lt;int&gt;&amp; head/*,int (&amp;pre)[maxn]*/)&#123; for(int i=1;i&lt;=n;i++) dis[i]=INF; dis[u]=0; disQ.push(Node(0,u));//保存用来更新的队列 bool vis[maxn]; memset(vis,false,sizeof(vis));//初始化 while(!disQ.empty())&#123; int x=disQ.top().position; disQ.pop(); if(vis[x]) continue; vis[x]=true;//不再对已访问过的位置进行访问 for(int j=head[x];j!=-1;j=e[j].nxt)&#123; int y=e[j].to;//遍历当前位置的邻点，并更新它们 if(dis[y]&gt;dis[x]+e[j].w)&#123; dis[y]=dis[x]+e[j].w; if(!vis[y]) disQ.push(Node(dis[y],y))/*,pre[y]=i*/; &#125; &#125; &#125; return ;&#125;//****************************************************************************************//int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m,s; std::cin&gt;&gt;n&gt;&gt;m&gt;&gt;s; int cnt=0; std::vector&lt;int&gt; head;//head[u],头为u的当前最晚出现的边标号 head.resize(n+1,-1); for(int i=0;i&lt;m;i++)&#123; int u,v,w; std::cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add(u,v,w,cnt,head); &#125; //memset(pre,0,sizeof(pre)); Dijstra(s,n,dis,head); for(int i=1;i&lt;=n;i++)&#123; if(i!=1) printf(&quot; &quot;); std::cout&lt;&lt;dis[i]; &#125; return 0;&#125; Floyd 算法Notice Floyd 算法是基于最朴素的动态规划的思想，求出全局上的任意两点的最短路问题，可以处理负边权的情况； 我们知道对于图G 中存在负权值环的话，沿着这个环一直前进是不会得到最短路的，Floyd 算法也无法处理这类的问题； 在一些加了若干限制的最短路问题中，往往都要回归到朴素的Floyd算法来； Proof考虑对每个k值，「i到j 的路径只允许经过标号不大于k的点」中最短路径长度dis[i][j]，明显k=n是我们所求问题的答案； 初始k=0，所欲值都是正无穷； 递归的说，对于已有的k-1允许的最短路径，新的最短路径要么经过k,要么维持不变； 状态转移方程为 dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]),for\\ all\\ (i,j)s 时间复杂度为O(|V|^3); Template:弱化版单源最短路径，不是正解，只有70分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;const int maxn=10005;const int N=500005;long long dis[maxn][maxn]; const long long INF= (1&lt;&lt;31)-1;void Floyd(int n,long long (&amp;dis)[maxn][maxn])&#123; for(int k=1;k&lt;=n;k++)&#123; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; dis[i][j]=std::min(dis[i][j],dis[i][k]+dis[k][j]); &#125; &#125; &#125; return ;&#125;int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m,s; std::cin&gt;&gt;n&gt;&gt;m&gt;&gt;s; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; dis[i][j]= INF; &#125; &#125; for(int i=0;i&lt;m;i++)&#123; int u,v,w; std::cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; dis[u][v]=std::min(dis[u][v],w*1LL);//可能由重边 &#125; Floyd(n,dis); for(int i=1;i&lt;=n;i++)&#123; if(i!=1) printf(&quot; &quot;); std::cout&lt;&lt;((i!=s)?dis[s][i]:0); &#125; return 0;&#125; SPFA 算法Notice: 对于一般的带权图，不同于正权图的relax操作每次取出最小的dis来进行下一步，边权有负数是不保证正确性的，所以我们维护一个普通的队列就行了，这也是SPFA经常得卡爆的地方，构造数据可以欺骗算法进入冗余的分支，使得队列的进出和relax多了很多不必要的操作； 这个算法本质是Bellmon-Ford算法的局部优化，复杂度为O(|V||E|)； 所以说没必要仔细解释Bellmon算法对全局的n-1次relax操作了，卡SPFA的一定卡Bellmon; （保证输入是随机数据）慎用，不要偷懒！因为它已经死了； Template:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374//#pragma GCC optimize(2)#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;const int maxn=100005;const int N=500005;struct Edge&#123; int head; int to; int nxt; int w;&#125;e[N];void add(int u,int v,int w,int&amp; cnt,std::vector&lt;int&gt;&amp; head)&#123; e[cnt].nxt=head[u]; head[u]=cnt; e[cnt].head=u,e[cnt].to=v,e[cnt].w=w; cnt++; return ;&#125;//******************************************************************************//const long long INF=(1&lt;&lt;31)-1;long long dis[maxn];void SPFA(int s,int n,long long (&amp;dis)[maxn],std::vector&lt;int&gt; &amp;head)&#123; for(int i=1;i&lt;=n;i++) dis[i]=INF; dis[s]=0; bool vis[maxn]; memset(vis,false,sizeof(vis)); std::queue&lt;int&gt; disQ; disQ.push(s); while(!disQ.empty())&#123; int x=disQ.front(); disQ.pop(); vis[x]=false; for(int i=head[x];i!=-1;i=e[i].nxt)&#123; int y=e[i].to; if(dis[y]&gt;dis[x]+e[i].w)&#123; dis[y]=dis[x]+e[i].w; if(!vis[y])&#123; vis[y]=true; disQ.push(y); &#125; &#125; &#125; &#125;&#125;//*************************************************************************************//int main ()&#123; //ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); #ifdef local freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout); #endif // local int n,m,s; std::cin&gt;&gt;n&gt;&gt;m&gt;&gt;s; int cnt=0; std::vector&lt;int&gt; head;//head[u],头为u的当前最晚出现的边标号 head.resize(n+1,-1); for(int i=0;i&lt;m;i++)&#123; int u,v,w; std::cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add(u,v,w,cnt,head); &#125; //memset(pre,0,sizeof(pre)); SPFA(s,n,dis,head); for(int i=1;i&lt;=n;i++)&#123; if(i!=1) printf(&quot; &quot;); std::cout&lt;&lt;dis[i]; &#125; return 0;&#125; Example暂时没有； 洛谷P3385 【模板】负环 洛谷P5909【模板】Johnson 全源最短路 Remark还是多整理一些模板少打比赛吧，太坐牢了，怎么写那么快的啊； 学校的专题等一波题解发下来吧，真的不知道里面是什么毒瘤数据；","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://101.42.54.79/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"基于Multisim的方波-三角波-正弦波-锯齿波函数发生器电子电路仿真项目设计","slug":"基于Multisim的方波-三角波-正弦波-锯齿波函数发生器电子电路仿真项目设计","date":"2023-07-01T20:50:39.000Z","updated":"2023-11-06T01:25:31.471Z","comments":true,"path":"posts/3610a686.html","link":"","permalink":"https://101.42.54.79/posts/3610a686.html","excerpt":"","text":"基于Multisim的方波-三角波-正弦波-锯齿波函数发生器电子电路仿真项目设计摘要函数信号发生器是在电子电路设计领域和设备检测领域应用极广，本项目利用基础的电子电路元件（电阻，电容，电位器，理想开关，直流稳压电源，运算放大器，二极管，稳压管等），通过对信号发生的基本原理与结构进行 了分析，设计了简易的方波-三角波-正弦波-锯齿波函数信号发生器：由各个直流稳压电源提供运算放大器的供电电压，利用文氏正弦型振荡电路产生正弦波，滞回比较器和同相比例放大器产生方波，在此基础上，利用积分放大器产生三角波以及利用电位器和二极管产生了锯齿波；本实验的全部结果均由软件Multisim14.2仿真完成。 关键词：文氏正弦型振荡电路，滞回比较器，积分放大器，Multisim14.2。 Abstract： Function signal generator is widely used in the field of electronic circuit design and equipment detection. This project uses basic electronic circuit components (resistors, capacitors, potentiometers, ideal switches, DC regulated power supplies, operational amplifiers, diodes, regulated tubes, etc.) to analyze the basic principle and structure of signal generation. A simple square-wave-triangular-sine-wave-sawtooth function signal generator is designed: the power supply voltage of the operational amplifier is provided by each DC voltage regulator, sinusoidal oscillation circuit is used to generate sinusoidal wave, hysteresis comparator and multiplication amplifier to generate square wave, and on this basis, triangular wave is generated by integrating amplifier and sawtooth wave is generated by potentiometer and diode. All the results of this experiment were simulated by Multisim14.2 software. Key words: sinusoidal oscillation circuit, hysteresis comparator, integrated amplifier, Multisim14.2. 目录第一章：前言、课程设计任务与要求第二章：电路设计原理2.1 正弦波产生电路工作原理2.2 方波产生电路工作原理2.3 三角波产生电路工作原理2.4 锯齿波产生电路工作原理第三章：Multisim仿真项目实验数据与方法记录3.1 正弦波发生实验数据与方法3.2 方波发生实验数据与方法3.3 三角波发生实验数据与方法3.4 锯齿波发生实验数据与方法第四章： 总结与体会第一章：前言、课程设计任务与要求函数信号发生器是一种信号发生装置，能产生某些特定的周期性时间函数波形信号，频率范围可从几个微赫到几十兆赫。除供通信、仪表和自动控制系统测试用外，还广泛用于其他非电测量领域，现代工业生产的函数发生器多采用集成电路。为进一步掌握电路基本理论与增强实验实践能力，本项目采用由集成运算放大器等分立式元件共同组成简易的方波-正弦波-三角波-锯齿波。 通过对电路分析与电子电路课程的学习，以及在电子电路实验的实践操作中，本设计应达到的 任务与要求为： 输出波形频率范围为0.02Hz~20kHz且连续可调； 正弦波幅值为±2V； 方波幅值为2V，占空比可调； 三角波峰-峰值为2V； 锯齿波峰-峰值为2V； 设计电路所需的直流电源可用实验室电源。 第二章：电路设计原理2.1 正弦波产生电路工作原理正弦波产生电路是一种振荡模型，满足巴克豪森稳定性准则：电子振荡器系统信号由输入到输出再反馈到输入的相差为360°，且增益为1，为振荡器振荡的必要条件。我们注意到电路启动时具有频率丰富的热白噪声，我们如果在放大电路中引入正反馈调节，在所有频率的信号都得到放大，在通过滤波相关的元件筛选出针对特定频率的信号，与原来同相位的信号叠加，重新输入至放大器中往复，最终形成振荡的信号。因此，一个正弦产生电路一般包括：放大电路，正反馈网络，选频网络，非线性环节。 2.1.1 产生正弦振荡的条件： 以热白噪声作为输入信号，要求输出频率一定且可调、一定幅值的信号； 引入的正反馈调节且振荡频率可控； 在产生稳定的振荡后，要求电路输出量自维持，也即： \\dot{A}\\dot{F}=1\\Longleftrightarrow \\left | \\dot{A}\\dot{F} \\right | =1,\\varphi _{A}+\\varphi _{F}=2n\\pi其中，前者被称为幅值平衡条件，后者被称为相位平衡条件； 信号幅值有从小到大直至稳幅的变化过程，必须满足起振条件，也即： \\left | \\dot{A}\\dot{F} \\right | >1 2.1.2 基本组成部分及其作用 放大电路：放大幅值； 正反馈网络：满足相位平衡条件； 选频网络：具有变化的电位器，确定保证产生正弦振荡的信号； 非线性环节：稳幅； 同向比例放大电路：使得幅值达到要求。 2.1.3 文氏桥正弦型振荡电路及分析用同相比例运算电路作放大电路，以RC串并联网络为选频网络和正反馈网络、并引入电压串联负反馈，两个网络构成桥路，一对顶点作为输出电压，一对顶点作为放大电路的净输入电压，就构成文氏桥振荡器。如图2.1.3.1所示： : 图2.1.3.1 文氏桥正弦型振荡电路图 {\\dot{U} _{+}} =\\frac{R//\\frac{1}{j\\omega C} }{R+\\frac{1}{j\\omega C}+R//\\frac{1}{j\\omega C} } \\dot{U}_{o} =\\frac{\\dot{U}_{o}}{3+j(\\omega RC-\\frac{1}{\\omega RC} )} \\dot{U} _{-} =\\frac{R_{1} \\dot{U} _{o} }{R_{1}+R_{F}} \\dot{A}\\dot{F}=1\\ \\Longleftrightarrow \\ 3+j(\\omega RC-\\frac{1}{\\omega RC} )=\\frac{R_{1}+R_{F}}{R_{1}} \\Longleftrightarrow \\ \\omega =\\frac{1}{RC},R_{F}=2R_{1}2.2 方波产生电路工作原理方波是一种典型的非正弦波，它有且只有高电平和低电平两个值，是数字逻辑信号的重要的部分，要求两种状态的相互自动转化，输出的信号必须以某种方式反馈于它的输入，以某种周期进行交替变化，电路中必须要有相应的延迟环节，因而使用滞回比较器和RC回路自充放电作为延迟环节来模拟方波信号的发生。 2.2.1 产生方波的条件 集成运算工作在非线性区； 正反馈调节； 输出电压限幅。 2.2.2 基本组成部分及作用 滞回比较电路：正反馈； 一阶RC回路：延迟环节，进行电压的跳变； 调节占空比环节：调节占空比。 2.2.3 滞回比较器电路及分析输入电压和输出电压之间的反馈完成，依赖于电容的充放电过程，如图2.2.3.1 : 图2.2.3.1 滞回比较器电路图 when \\ U_{o}=U_{Z} ,U_{+}=\\frac{R_{1}}{R_{1}+R_{2}}U_{o},\\ C \\ is \\ incharging \\ until \\ U_{C} =U_{-}>U_{+},U_{o}=-U_{Z} when \\ incharging,U_{C}=U_{Z}-\\frac{2R_{1}+R_{2}}{R_{1}+R_{2}}e^{-\\frac{t}{RC}} until \\ U_{C}=\\frac{R_{1}}{R_{1}+R_{2}}U_{Z},jump,t=2R_{3}Cln(1+\\frac{2R_{1}}{R_{2}}) changing \\ R_{3},\\ then \\ chaging \\ duty\\ ratio.2.3 三角波产生电路工作原理从数学关系不难看出，将方波函数按照区间积分可以得到三角波函数，因此只需要在方波产生的电路基础上串联一个积分运放器。 2.3.1 基本组成部分及作用 方波产生电路； 积分放大器； 调频环节。 2.3.2 串联分析注意电阻调频电阻R1的位置与Uo相连，如图2.3.2.1所示： : 图2.3.2.1 三角波发生电路基本框架 2.4 锯齿波产生电路工作原理锯齿波是更为一般的三角波，我们只需要改变三角波的占空比即可得到锯齿波。 2.4.1 基本组成部分及作用 三角波产生电路； 调节占空比环节。 2.4.2 基本组成电路注意调节占空比环节的接法，如图2.4.2.1所示： 第三章：Multisim仿真项目实验数据与方法记录3.1 正弦波发生实验数据和方法完整的仿真电路图如图3.1.1所示 : 图3.1.1 正弦发生仿真电路图 其中，闭合开关，先将R4调节100%，以满足起振条件，观察到XSC2变化至稳幅状态，再调回R4至40%不变，可以观察到XSC1即为满足条件的正弦信号，调节R1，R6可以更改信号频率，更改R2可以更改信号幅值，仿真数据如图3.1.2所示 : 图3.1.2 正弦波 3.2 方波发生实验数据与方法完整的仿真电路图如图3.2.1所示 : 图3.2.1 方波仿真电路图 滑动S2，S4所在的电位器，可以调节方波占空比，实验数据如图3.2.2所示： : 图3.2.2 方波 3.3 三角波发生实验数据与方法完整的仿真电路图如图3.3.1所示 : 图3.3.1 三角波仿真电路图 调节合适R17和外接电源电压的值可以得到符合要求的三角波，如图3.3.2所示： : 图3.3.2 三角波 3.4 锯齿波发生实验数据与方法完整的仿真电路图如3.4.1所示 : 图3.4.1 锯齿波仿真电路图 调节S1，S4所在电位器可以改变占空比，实验数据如图3.4.2所示： : 图3.4.2 锯齿波 第四章：总结与体会 通过本次仿真实验，我对软件Multisim有了更深层次的认识，掌握熟练运用并搭建合适的模型解决实际问题的能力，也希望仿真技术能为以后的学习工作带来更多遍利； 通过对掌握的理论知识加上仿真实验带来的实践思考，我对电子电路学科有了进一步的了解，系统地总结了一部分知识，对将来信息学科的学习大有裨益； 通过对文字排版和内容规划，我对markdown这一语言有了更加熟练的应用； 但本次仿真项目仍然存在部分遗憾的情况:比如改变三角波中R17右端的位置至R3右端，则不能得出令人满意的仿真结果，具体原因有待进一步的考察。","categories":[],"tags":[{"name":"电路分析","slug":"电路分析","permalink":"https://101.42.54.79/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"},{"name":"Multisim","slug":"Multisim","permalink":"https://101.42.54.79/tags/Multisim/"}]}],"categories":[],"tags":[{"name":"原理","slug":"原理","permalink":"https://101.42.54.79/tags/%E5%8E%9F%E7%90%86/"},{"name":"verilog","slug":"verilog","permalink":"https://101.42.54.79/tags/verilog/"},{"name":"算法","slug":"算法","permalink":"https://101.42.54.79/tags/%E7%AE%97%E6%B3%95/"},{"name":"电路分析","slug":"电路分析","permalink":"https://101.42.54.79/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"},{"name":"Multisim","slug":"Multisim","permalink":"https://101.42.54.79/tags/Multisim/"}]}